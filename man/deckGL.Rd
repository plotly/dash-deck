% Auto-generated: do not edit by hand
\name{deckGL}

\alias{deckGL}

\title{DeckGL component}

\description{
This component lets you visualizes PyDeck and deck/json files directly in Dash. It also exposes various events (such as click, hover and drag) inside callbacks.
}

\usage{
deckGL(id=NULL, clickEvent=NULL, clickInfo=NULL, data=NULL,
disableContext=NULL, dragEndEvent=NULL, dragEndInfo=NULL,
dragStartEvent=NULL, dragStartInfo=NULL, enableEvents=NULL,
hoverEvent=NULL, hoverInfo=NULL, mapboxKey=NULL, style=NULL,
tooltip=NULL)
}

\arguments{
\item{id}{Character. The ID used to identify this component in Dash callbacks.}

\item{clickEvent}{Named list. Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.
This prop is updated when an element in the map is clicked. This contains
the original gesture event (in JSON).}

\item{clickInfo}{Named list. Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.
This prop is updated when an element in the map is clicked. This contains
the picking info describing the object being clicked.
Complete description here:
https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object}

\item{data}{Named list | character. Your map using the Deck.gl JSON format. This can be generated by calling
`pdk.Deck(...).to_json()`. Both a Python dictionary and a JSON-string your map is accepted.}

\item{disableContext}{Logical. This is a boolean value (e.g. `True`, `False`)  indicating whether or not to disable the default context menu
that shows up when right clicking on the map. If set to `True`, right clicking to rotate
a map or adjust its pitch will not trigger the default context menu.}

\item{dragEndEvent}{Named list. Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.
This prop is updated when the user releases from dragging the canvas. This contains
the original gesture event (in JSON).}

\item{dragEndInfo}{Named list. Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.
This prop is updated when the user releases from dragging the canvas. This contains
the picking info describing the object being dragged.
Complete description here:
https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object}

\item{dragStartEvent}{Named list. Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.
To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type. 
This prop is updated when the user starts dragging on the canvas. This contains
the original gesture event (in JSON).}

\item{dragStartInfo}{Named list. Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.
This prop is updated when the user starts dragging on the canvas. This contains
the picking info describing the object being dragged.
Complete description here:
https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object}

\item{enableEvents}{List of characters | logical. Either a boolean indicating if all event callbacks should be enabled, or a list of strings
indicating which ones should be used. If it's a list, you will need to specify one of the
following gestures: `click`, `dragStart`, `dragEnd`, `hover`.}

\item{hoverEvent}{Named list. Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.
This prop is updated when an element in the map is hovered. This contains
the original gesture event (in JSON).}

\item{hoverInfo}{Named list. Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.
This prop is updated when an element in the map is hovered. This contains
the picking info describing the object being hovered.
Complete description here:
https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object}

\item{mapboxKey}{Character. You will need a mapbox token to use deck.gl. Please create a mapbox
and follow the instructions here: https://docs.mapbox.com/help/how-mapbox-works/access-tokens/}

\item{style}{Named list. Custom CSS for your map. This is useful for changing the height, width, and sometimes the background color.}

\item{tooltip}{Named list | logical. This can be a boolean value (e.g. `True`, `False`) to display the default tooltip.
You can also give a dictionary specifying an `html` template and custom style using `css`. For more
information about templating, see: https://pydeck.gl/tooltip.html}
}

\value{named list of JSON elements corresponding to React.js properties and their values}

